CHAPTER 5

Exercise 1:
Logical operators can simplify nested conditional statements. For example, can you rewrite this code using a single if statement?

if (x > 0) {
    if (x < 10) {
        System.out.println("positive single digit number.");
    }
}

ANSWER:

if (x > 0 && x < 10) {
  System.out.println("positive single digit number.");
}

Exercise 2:
For the following program:

public static void zoop(String fred, int bob) {
    System.out.println(fred);
    if (bob == 5) {
        ping("not ");
    } else {
        System.out.println("!");
    }
}

public static void main(String[] args) {
    int bizz = 5;
    int buzz = 2;
    zoop("just for", bizz);
    clink(2 * buzz);
}

public static void clink(int fork) {
    System.out.print("It's ");
    zoop("breakfast ", fork);
}

public static void ping(String strangStrung) {
    System.out.println("any " + strangStrung + "more ");
}

1. Draw a stack diagram that shows the state of the program the second time zoop is invoked.

main[bizz=5, buzz=2]
zoop[fred="just for", bob=5]
ping[strangStrung="not "]
zoop[fred="just for", bob=5]
main[bizz=5, buzz=2]
clink[fork=4]
zoop[fred="breakfast", bob=4]
main[bizz=5, buzz=2]

2. What is the complete output?

The complete output is:
just for
any not more 
It's breakfast 
!

Exercise 3:
Draw a stack diagram that shows the state of the program in Section 5.8 after main invokes nLines with the parameter n == 4, just before the last invocation of nLines returns.

nLines[n=4]
nLines[n=3]
nLines[n=2]
nLines[n=1]